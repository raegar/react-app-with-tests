{"version":3,"sources":["logo.svg","Link.react.js","Button.react.js","Users.react.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","STATUS","HOVERED","NORMAL","Link","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onMouseEnter","bind","assertThisInitialized","_onMouseLeave","state","class","setState","react_default","a","createElement","className","href","page","onMouseEnter","onMouseLeave","children","React","Component","Button","handleClick","text","stateUpdater","onClick","Users","data","handleGet","response","axios","get","map","user","key","name","App","src","logo","alt","target","rel","Link_react_Link","Button_react_Button","Users_react_Users","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9383a39b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst STATUS = {\n    HOVERED: 'hovered',\n    NORMAL: 'normal',\n};\n\nexport default class Link extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this._onMouseEnter = this._onMouseEnter.bind(this);\n        this._onMouseLeave = this._onMouseLeave.bind(this);\n\n        this.state = {\n            class: STATUS.NORMAL,\n        };\n    }\n\n    _onMouseEnter() {\n        this.setState({class: STATUS.HOVERED});\n    }\n\n    _onMouseLeave() {\n        this.setState({class: STATUS.NORMAL});\n    }\n\n    render() {\n        return (\n            <a\n                className={this.state.class}\n                href={this.props.page || '#'}\n                onMouseEnter={this._onMouseEnter}\n                onMouseLeave={this._onMouseLeave}\n            >\n                {this.props.children}\n            </a>\n        );\n    }\n}","import React from 'react';\n\nexport default class Button extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        \n        this.state = { text: \"\" };\n    }\n\n    handleClick() {\n        this.setState(this.stateUpdater);\n    }\n\n    stateUpdater() {\n        return { text: \"CLiCKED!\" };\n    }\n\n    render() {\n        return (\n            <button onClick={this.handleClick}>\n                {this.state.text || this.props.text}\n            </button>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: [] };\n        this.handleGet = this.handleGet.bind(this);\n    }\n\n    handleGet(response) {\n        this.setState(this.stateUpdater(response));\n    }\n\n    stateUpdater(response) {\n        return { data: response.data };\n    }\n\n    async componentDidMount() {\n        const response = await axios.get(\n            \"https://jsonplaceholder.typicode.com/users\"\n        );\n        this.handleGet(response);\n    }\n\n    render() {\n        return (\n            <ul>\n                {this.state.data.map(user => (\n                    <li key={user.name}>{user.name}</li>\n                ))}\n            </ul>\n        );\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './styles/App.css';\nimport Link from './Link.react';\nimport Button from './Button.react';\nimport Users from './Users.react';\nimport './styles/style.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            React App with Tests\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <br />\n          <Link page=\"http://www.ucp.ac.uk\">University Centre Peterborough</Link>\n          <br />\n          <Button text=\"CLICK ME\" />\n          <br />\n          <Users />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}